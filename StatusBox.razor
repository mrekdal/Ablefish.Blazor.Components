@using Microsoft.Extensions.Logging;
@inject ILoggerFactory logFactory
@implements IObserver

@if ( StatusMessage != null && StatusMessage.HasData)
{
    <div class="box-status box-@CssClass() p-2 w-100">
        <div class="box-status-header">
            @StatusMessage.Header
        </div>
        <div class="box-@CssClass()-message">
            @((MarkupString)StatusMessage.Text)
        </div>
    </div>
}
@code {
    [Parameter]

    public IStatusMessage? StatusMessage { get; set; }
    public GuiElement GuiElement { get => GuiElement.StatusBox; }

    public void HandleUpdate()
    {
        StateHasChanged();
    }

    private string CssClass()
    {
        if (StatusMessage == null) return "null";
        switch (StatusMessage.Status)
        {
            case StatusType.Success: return "success";
            case StatusType.Information: return "info";
            case StatusType.Warning: return "warning";
            case StatusType.Error: return "error";
            default: return "info";
        }
    }
}
